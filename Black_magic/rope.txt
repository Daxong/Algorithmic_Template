rope支持什么呢？你可以写一个rope<char> a，然后，把a当作一个字符串，你可以：
1.在log时间、空间内取a的一个子串
2.在log时间、空间内将两个串链接起来
也就是说，这是一个支持查找、插入、删除、剪切、复制的一个超级强大的数据结构。
你甚至可以用一个rope来管理长达几百M的字符串却只占用十几个K的内存，
所有的操作用时几乎和串的长度无关。

它是怎么实现的？？
我查了一下stl中的文档，参考了一下wikipedia（rope，computer science），
终于弄明白了它的原理。
它就是一个可持久化（只读）的平衡树！
这个树分为四种节点，其中通常情况下只使用两种节点：
叶节点（代表一小段字符串）
内节点（表示它左右两个子树的链接，内节点本身不存储数据）
对于任何操作，它从不修改已有的值，而是建立新的节点。
它的平衡策略很特殊，大体来说，如果一个节点所在子树的高度是h，
它代表的串的长度达到了fib(h)，就说它是平衡的。
一般情况，并不管节点是否平衡，使用最直接的操作方式。
当它在发现某一个树的高度超过给定值之后，在忍无可忍的情况下，进行一次”平衡“操作，
利用某个特殊的策略（有点像fibheap中的consolidate操作，不过它是以高度为关键字的），
拼凑出尽量多的平衡节点出来。
具体的操作过程我看了之后感觉有点晕，并且严重怀疑它背后的数学证明。
但大量实践雄辩地证明了：这个策略工作地非常好。